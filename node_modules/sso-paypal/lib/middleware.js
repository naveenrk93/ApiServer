'use strict';

const ssoUtil = require('./util');

/*
 * Logout if session has been inactive for long
 * @param req
 */
function checkSSOExpiration(req) {
    const passport = req.session && req.session.passport;
    if (!(passport && Date.now() < passport.expiresAfter)) {
        req.logout();   // Expire the SSO user
    } else if (passport) {
        passport.expiresAfter = ssoUtil.expiresAfter();
    }
}

/**
 * Middleware function that checks to see if the user has been authenticated.
 *
 * @param req
 * @param res
 * @param next
 */
module.exports = function (settings) {
    const loginUrl = settings.mountpath + settings.appLogin;
    return function ssoAuthenticate(req, res, next) {

        // Provision for testing
        if (settings.user && (/test/i).test(process.env.NODE_ENV)) {
            req.user = settings.user;
            next();
            return;
        }
        
        // If the requested url matches one of the exclude regex's, let the request pass through
        if(settings.exclude.test(req.url)) {
            next();
            return;
        }

        checkSSOExpiration(req);

        // If the user is not authenticated, save where they were going and redirect to login.
        // Otherwise, save the user to res.locals and pass the request through.
        if (!req.isAuthenticated()) {
            if (req.session) {
                req.session.goingTo = req.url;
            }
            res.redirect(loginUrl);
        } else {
            res.locals.user = req.user;
            next();
        }
    };
};
