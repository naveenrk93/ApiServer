'use strict';

const ssoUtil = require('./util');

function regenerateSession(req, callback) {
    const session = req.session;

    if (!session) {
        callback();
        return;
    }

    // Copy following objects from old session to new session
    const csrfSecret = session._csrfSecret;
    const passport = session.passport;
    const goingTo = session.goingTo;

    session.regenerate(function () {
        req.session._csrfSecret = csrfSecret;
        if (passport) {
            passport.expiresAfter = ssoUtil.expiresAfter();
        }
        req.session.passport = passport;
        req.session.goingTo = goingTo;
        callback();
    });
}

/**
 * addRoutes - Adds the required routes for both login and saml response posting
 * for paypal SSO integration
 *
 * @param  {Object} app    Express 4 app object to attach routes to
 * @param  {Object} settings
 * @param  {Object} passport Passport.js instance
 */
module.exports = function addRoutes(app, settings, passport) {

    const mountpath = settings.mountpath;
    const passportAuthConfig = {
        failureRedirect: settings.failureRedirect,
        failureFlash: settings.flash
    };
    // Register the application login url. Defaults to /login
    app.get(mountpath + settings.appLogin,
        passport.authenticate('saml', passportAuthConfig),
        function (req, res) {
            regenerateSession(req, function () {
                res.redirect(mountpath);
            });
        });

    // Register an endpoint for the SSO service to redirect the browser to with the users SAML token. Redirects the user
    // to where they were originally going if it's been saved to the session, otherwise redirects to app root. Defaults
    // to /saml/acs
    app.post(mountpath + settings.samlPostback,
        passport.authenticate('saml', passportAuthConfig),
        function (req, res) {
            regenerateSession(req, function () {
                res.redirect(req.session.goingTo || mountpath);
            });
        });
};
