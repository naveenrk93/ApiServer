'use strict';

const Passport = require('passport');
const Flash = require('connect-flash');
const Configure = require('./configure');
const AddRoutes = require('./routes');
const Middleware = require('./middleware');

/**
 * Factory function for registering SSO middleware. Creates a new express sub
 * app to be mounted on the main application. On mounting, the app sets up
 * login and saml post back routes, all passport middleware, and the actual
 * authentication middleware.
 *
 * @param config Configuration object
 * @returns express sub app
 */
module.exports = function ssoFactory(config) {

    const app = require('express')();

    app.once('mount', function onmount(parent) {
        // Remove sacrificial express app
        parent._router.stack.pop();

        config.mountpath = app.mountpath === '/' ? '' : app.mountpath;

        // If the user provides a passphrase,
        // we can just use it (either comes plain text in config file or via vault:key_name).
        // If they provide a passphraseKey, it means that we're going to have to
        // get it out of the configs.
        if (!config.passphrase && config.passphraseKey) {
            config.passphrase = parent.kraken.get('vault:keys:' + config.passphraseKey);
        }

        // `settings` will return back without privateKey and publicCert
        // when the getSSOConfig call is falling back on the agent.
        // This will not affect the functionality as `settings` is more
        // focussed towards routes registration.
        const settings = Configure(config, Passport);

        parent.use(Passport.initialize());
        parent.use(Passport.session());
        if (settings.flash) {
            parent.use(Flash());
        }
        parent.use(Middleware(settings));
        AddRoutes(parent, settings, Passport);

    });
    return app;
};
