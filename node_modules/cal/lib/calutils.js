'use strict';
/* global Set */

var coreUtil = require('core-util-is'),
    maskme = require('maskme'),
    querystring = require('querystring'),
    stringify = require('json-stringify-safe'),
    truncate = require('lodash.truncate');

var calProhibitedCharsRegex = /[/ '"<>\t\n]/g,  //'
    calProhibitedNonAsciiChars = /[^\x20-\x7E]/g;

var PIIKeywords = new Set(require('../config/config.json').PIIKeywords);

function escapeControlChars(str) {
    var res = '';
    for (var i = 0, last = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        // \n = 10
        // \r = 13
        // \t = 9
        // \f = 12
        if (code === 9 || code === 10 || code === 12 || code === 13) {
            res += str.slice(last, i) + '\\';
            last = i + 1;

            if (code === 9) {
                res += 't';
            } else if (code === 10) {
                res += 'n';
            } else if (code === 12) {
                res += 'f';
            } else if (code === 13) {
                res += 'r';
            }
        }
    }
    return res + str.slice(last);
}

function escapeControlCharsAndAmp(str) {
    var res = '';
    for (var i = 0, last = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        // \n = 10
        // \r = 13
        // \t = 9
        // \f = 12
        // '&' = 0x26
        if (code === 9 || code === 10 || code === 12 || code === 13) {
            res += str.slice(last, i) + '\\';
            last = i + 1;

            if (code === 9) {
                res += 't';
            } else if (code === 10) {
                res += 'n';
            } else if (code === 12) {
                res += 'f';
            } else if (code === 13) {
                res += 'r';
            }
        } else if (code === 0x26) {
            res += str.slice(last, i) + '*';
            last = i + 1;
        }
    }
    return res + str.slice(last);
}

// Remove characters CAL will not accept.
// https://confluence.paypal.com/cnfl/display/CAL/CAL+Message+Guidelines#CALMessageGuidelines-G6CALMessageTypeandNamefieldguidelines
function sanitize(str) {
    if (coreUtil.isString(str)) {
        str = str.replace(calProhibitedCharsRegex, '_');
        str = str.replace(calProhibitedNonAsciiChars, '_');
        str = truncate(str, {length: 127});
    }
    return str;
}

//Filtering known PII from CAL
function isPIISafe(key) {
    if (PIIKeywords.has(key)) {
        return false;
    }
    return true;
}

function filterPII(data) {
    data = maskme.maskEmail(data);
    return data;
}

/*eslint no-extend-native:0 */
//JSON.stringify(err, ["message", "errno", "type", "name", "stack"])
Object.defineProperty(Error.prototype, 'toJSON', {
    value: function () {
        var alt = {
            name: this.name,
            type: this.type,
            errno: this.errno,
            message: this.message,
            stack: this.stack
        };

        return alt;
    },
    configurable: true,
    writable: true
});

/**
 * For extracting useful information out of Error object
 */
function errorToJSON(errObj) {
    return {
        name: errObj.name,
        type: errObj.type,
        errno: errObj.errno,
        message: errObj.message,
        stack: errObj.stack
    };
}

function parseJSON(value) {
    var obj;
    try {
        obj = JSON.parse(stringify(value));
    } catch (e) {
        //No op
    }
    return obj;
}


// NOTE: this is a copy-past from node.js core
function stringifyPrimitive(v) {
  if (typeof v === 'string') {
    return v;
  }
  if (typeof v === 'number' && isFinite(v)) {
    return '' + v;
  }
  if (typeof v === 'boolean') {
    return v ? 'true' : 'false';
  }
  return '';
}


function stringifyObject(object) {
  var res = '';

  var keys = Object.keys(object);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var value = object[key];

    if (i !== 0) {
      res += '&';
    }
    res += key + '=';

    if (value === object) {
      res += '[Circular ~]';
    } else {
      res += stringifyPrimitive(value);
    }
  }
  return res;
}


function pad2(num) {
  var res = num.toString();
  if (res.length === 1) {
    return '0' + res;
  } else {
    return res;
  }
}


function formatTimestamp(value) {
    var TZ = new Date().getTimezoneOffset() * 60000;
    var local = (typeof value === 'number' ? value : Date.now()) - TZ;

    var ssec = Math.floor((local / 10) % 100);
    var sec = Math.floor((local / 1000) % 60);
    var min = Math.floor((local / 60000) % 60);
    var hour = Math.floor((local / 3600000) % 24);

    // 'HH:mm:ss.SS'
    return pad2(hour) + ':' + pad2(min) + ':' + pad2(sec) + '.' + pad2(ssec);
}


module.exports = {
    sanitize: sanitize,
    isPIISafe: isPIISafe,
    filterPII: filterPII,
    parseJSON: parseJSON,
    errorToJSON: errorToJSON,
    escapeControlChars: escapeControlChars,
    escapeControlCharsAndAmp: escapeControlCharsAndAmp,
    stringifyObject: stringifyObject,
    formatTimestamp: formatTimestamp
};
