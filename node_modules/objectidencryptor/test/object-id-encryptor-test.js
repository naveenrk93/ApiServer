'use strict';

var assert = require('assert'),
    ObjectIdEncryptor = require('../');
    
var config = {
    key: '000000000000000000000000000000000000000000000000',
    iv: '00000000000000000000000000000000000000000000000000000'
};

describe('ObjectIdEncryptor', function() {
    
    describe('Given a valid key and iv string', function() {
        
        it('should encrypt a 13-char object id', function() {
            var data = '1152921504606846976';
            var expectedResponse = 'H44KR9CS6E5FW';
            
            config.type = 'PLAIN';
            
            var response = ObjectIdEncryptor.encrypt(data, config);
            assert.equal(response, expectedResponse);
        });
        
        it('should decrypt a 13-char encrypted object id', function() {
            var data = 'K3D33FDF4RXEA';
            var expectedResponse = '1152921504606846977';
            
            config.type = 'PLAIN';
            
            var response = ObjectIdEncryptor.decrypt(data, config);
            assert.equal(response, expectedResponse);
        });
        
        it('should encrypt a 16-char object id', function() {
            var data = '1152921504606846976';
            var expectedResponse = 'H44KR9CS6E5FWRBH';
            
            config.type = 'PLAIN_WITH_CRC';
            
            var response = ObjectIdEncryptor.encrypt(data, config);
            assert.equal(response, expectedResponse);
        });
        
        it('should decrypt a 16-char encrypted object id', function() {
            var data = 'H44KR9CS6E5FWRBH';
            var expectedResponse = '1152921504606846976';
            
            config.type = 'PLAIN_WITH_CRC';
            
            var response = ObjectIdEncryptor.decrypt(data, config);
            assert.equal(response, expectedResponse);
        });
        
        it('should encrypt a 17-char object id', function() {
            var data = '1152921504606846976';
            var expectedResponse = '08005726BG418852C';
            
            config.type = 'TWISTED';
            
            var response = ObjectIdEncryptor.encrypt(data, config);
            assert.equal(response, expectedResponse);
        });
        
        it('should decrypt a 17-char encrypted object id', function() {
            var data = '08005726BG418852C';
            var expectedResponse = '1152921504606846976';
            
            config.type = 'TWISTED';
            
            var response = ObjectIdEncryptor.decrypt(data, config);
            assert.equal(response, expectedResponse);
        });
    });
});