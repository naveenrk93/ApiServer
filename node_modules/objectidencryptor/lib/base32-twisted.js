'use strict';

var hexConverter = require('./hex-converter');

var BASE32_TWISTED_CHARS = 'ABCDEFGHJKLMNPRSTUVWXY0123456789',
    BASE32_TWISTED_ID_LENGTH = 17;

module.exports.encode = function(data) {
    var result = new Buffer(BASE32_TWISTED_ID_LENGTH),
        n = new Buffer(12),
        b = new Buffer(5),
        nNumber,
        i;

    // Force the data into a buffer.
    // On the off chance that data is a number, make it a string first
    if (!Buffer.isBuffer(data)) {
        data = new Buffer('' + data);
    }

    // split it up into a few base32 digits and more decimal digits
	// the base32 part is 5 digits and encodes 25 bits of data
	for ( i = 0; i < 5; i++ ) {
		b.writeUInt8(BASE32_TWISTED_CHARS.charCodeAt(data.readUInt8(data.length-1) & 0x1f), i);
		shiftBufferBitsRight(data, 5); // unsigned shift
	}

    nNumber = parseInt(data.toString('hex'), 16);
    // the decimal part is 12 digits and encodes 39 bits of data
	for ( i = 0; i < 12; i++ ) {
		n.writeUInt8((( nNumber % 10 ) + '').charCodeAt(0), i);
		nNumber /= 10;
	}

    n.copy(result, 0, 0, 1);
    b.copy(result, 1, 0, 2);
    n.copy(result, 3, 1, 6);
    b.copy(result, 8, 2, 4);
    n.copy(result, 10, 6, 12);
    b.copy(result, 16, 4, 5);

    return result.toString();
};

module.exports.decode = function(data) {
    var result = new Buffer(8),
        n = new Buffer(12),
        nStr,
        nResultBuffer,
        b = new Buffer(5),
        bStr,
        i,
        nNumber = 0,
        nChar,
        bVal;

    result.fill(0);

    // Force the data into a buffer.
    // On the off chance that data is a number, make it a string first
    if (!Buffer.isBuffer(data)) {
        data = new Buffer('' + data);
    }

    if (data.length !== BASE32_TWISTED_ID_LENGTH) {
        throw "Invalid Base32 encoding: Expected length of " + BASE32_TWISTED_ID_LENGTH + " but got " + data.length;
    }

    data.copy(n, 0, 0, 1);
    data.copy(b, 0, 1, 3);
    data.copy(n, 1, 3, 8);
    data.copy(b, 2, 8, 10);
    data.copy(n, 6, 10, 16);
    data.copy(b, 4, 16, 17);

    nStr = n.toString();
    bStr = b.toString();

    for ( i = 11; i >= 0; i-- ) {
        nChar = nStr.charAt(i);
		if ( nChar < '0' || nChar > '9' ) {
			throw "Invalid Base32 encoding: expected digit";
		}
		nNumber = ( nNumber * 10 ) + (+nChar);
	}

    nResultBuffer = new Buffer(hexConverter.decToHex('' + nNumber), 'hex');
    nResultBuffer.copy(result, (result.length - nResultBuffer.length));

    // decipher the string into a 64-bit number
	for (i = 4; i >= 0; i-- ) {
        shiftBufferBitsLeft(result, 5);
        bVal = result.readUInt8(result.length-1) | BASE32_TWISTED_CHARS.indexOf(bStr.charAt(i));
        result.writeUInt8(bVal, result.length-1);
	}

    return result;
};

function shiftBufferBitsRight(buffer, bits) {
    var i = 0,
        currVal,
        carry = 0,
        moved = 0;

    if (bits > 8 || bits < 1) {
        throw 'Cannot shift buffers by more than 8 bits at a time currently';
    }

    for (i = 0; i < buffer.length; i++) {
        currVal = buffer.readUInt8(i);
        moved = currVal & (Math.pow(2, bits) - 1);

        currVal >>>= bits;

        if (carry !== 0) {
            currVal |= (carry << (8 - bits));
        }

        buffer.writeUInt8(currVal & 0xFF, i);
        carry = moved;
    }
}

function shiftBufferBitsLeft(buffer, bits) {
    var i = 0,
        currVal,
        carry = 0,
        moved = 0;

    if (bits > 8 || bits < 1) {
        throw 'Cannot shift buffers by more than 8 bits at a time currently';
    }

    for (i = buffer.length-1; i >= 0; i--) {
        currVal = buffer.readUInt8(i);
        moved = currVal >> (8 - bits);

        currVal <<= bits;

        if (carry !== 0) {
            currVal |= carry;
        }

        buffer.writeUInt8(currVal & 0xFF, i);
        carry = moved;
    }
}
