'use strict';

var REQUIRED_LENGTH_OF_CHARACTER_SET = 32;
var encodeCharacterSet = "23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
var decodeTable = {};

(function() {
    var i;
    for (i = 0; i < 32; i++) {
        decodeTable[encodeCharacterSet.charAt(i)] = i;
    }
})();

module.exports.encode = function(src) {
    var dst = '';
    var srcpos = 0;
    // var dstpos = 0;
    var bitsready = 0;
    var workspace = 0;
    var sourceByte = 0;

    if ( src.length === 0 ) {
        return "";
    }
    sourceByte = 0x000000FF & src.readUInt8(srcpos++);
    workspace = sourceByte << 3;
    bitsready = 8;
    while ( bitsready > 0 || srcpos < src.length ) {
        workspace <<= 5;
        if ( bitsready < 5 && srcpos < src.length ) {
            sourceByte = 0x000000FF & src.readUInt8(srcpos++);
            workspace |= ( sourceByte << ( 8 - bitsready ) );
            bitsready += 8;
        }
        dst += characterAt(( workspace & 0x0000f800 ) >> 11);
        bitsready -= 5;
    }

    return dst;
};

module.exports.decode = function(src) {
    var dst = [];

    var bitsready = 0;
    var srcpos = 0;
    var workspace = 0;
    var decoded = 0;

    while ( srcpos < src.length ) {
        while ( bitsready < 8 && srcpos < src.length ) {
            decoded = decodeTable[src.charAt(srcpos)];
            srcpos++;
            switch ( decoded ) {
            case undefined : // error
                throw "Invalid character found for Base32 encoding.";
            default :
                workspace |= ( (decoded & 0x000000ff) << ( 11 - bitsready ) );
                bitsready += 5;
                break;
            }
        }
        if ( bitsready >= 8 ) {
            dst.push( ( workspace & 0x0000ff00 ) >> 8 ) ;
            workspace <<= 8;
            bitsready -= 8;
        }
    }

    return new Buffer(dst);
};

function characterAt(indexInput) {
    if ((indexInput < 0) || (indexInput > REQUIRED_LENGTH_OF_CHARACTER_SET)) {
        throw "Index should be from 0 to " + REQUIRED_LENGTH_OF_CHARACTER_SET + "Index: " + indexInput;
    }

    return encodeCharacterSet.charAt(indexInput);
}

// function binaryToBase32EncodedSize(srcSize) {
//     if ( srcSize <= 0 ) {
//         return 0;
//     }
//     return ( ( srcSize * 8 ) + 4 ) / 5;
// }
