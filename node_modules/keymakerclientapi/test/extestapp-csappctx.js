'use strict';
var assert = require('assert');
var cal = require('cal');
var topos = require('topos');
var nconf = require('nconf');
var rewire = require("rewire");
var kmClient;

cal.setDefaultWriteStream('console');
function expiringAppName() {
    return 'expiringtestapp';
}
function expiringAppContextName() {
    return 'expiringtestapp_cryptoserv_app_context';
}
var TAKeyMakerClient;
describe('expiringTestApp-api-positive', function() {            
    // setting up vault
    before('expiringTestApp-test-setup', function(next) {
        TAKeyMakerClient = rewire('../lib/KeyMakerClient');
        TAKeyMakerClient.__set__("utils.getAppName", expiringAppName);
        TAKeyMakerClient.__set__("utils.getAppContextName", expiringAppContextName);

        console.time('expiringTestApp-test-setup');
        this.timeout(20000);
        process.env.SHARE_PWD = 'aardvark';
        
        var opt = {};
        opt.appname = 'expiringtestapp';
        opt.unitTest = true;

        // Initialize topo
        topos.init(nconf.get('topos'), nconf);

        TAKeyMakerClient.create(opt, function(err, obj) {
            if (err) {
                console.log('client-tests err obj: ' + err);
            }
            kmClient = obj;
            console.timeEnd('expiringTestApp-test-setup');
            next();
        });
    });

    it('expiringTestApp-cryptoserv-encrypt-decrypt-operation', function(next) {
        var requestObject = {
            keyId: '101',
            data: new Buffer('05940893650789087'),
            isPKCS7: false
        };
        console.time('expiringTestApp-cryptoserv-encrypt-decrypt-operation');
        try {            
            kmClient.encrypt(requestObject, function(error, res) {
                console.log('*** expiringTestApp-cryptoserv-encrypt-decrypt-operation-test : ENCRYPT ***', error, res);
                assert(!error, 'No error');
                assert(res.response_code === 200, 'response code 200');
                assert(res.result, 'result present in response');
                assert(typeof res.result.encodedData === 'string', 'encrypt api output expected to be a string');

                requestObject = {
                    keyId: '101',
                    data: res.result.encodedData,
                    isPKCS7: false
                };

                kmClient.decrypt(requestObject, function(error, res) {
                    console.log('*** expiringTestApp-cryptoserv-encrypt-decrypt-operation-test : DECRYPT ***', error, res);
                    assert(error.error_code === 23, 'Error code 23: CRYPTOSERV_EXPIRED_APP_CTX');
                    assert(!res, 'No response');
                    console.timeEnd('expiringTestApp-cryptoserv-encrypt-decrypt-operation');                                        
                    next();
                });
            });                                               
        } catch(err) {
            return next(err);
        }
    });
            
    it('cryptoserv-compatibility-match-hmac-from-java-with-node', function(next) {
        console.time('cryptoserv-compatibility-match-hmac-from-java-with-node');
        var requestObject = {
            keyId: '101',
            data: new Buffer('compatibility test #101')
        };
        kmClient.hmac(requestObject, function(error, res) {
            assert(!error, 'No error');
            assert(res.response_code === 200, 'response code 200');
            assert(res.result, 'result present in response');
            assert(res.result.encodedData === 'oIAm0dlUysEhdX5q7amlyqgpg1Y=', 'expected to be equal');
            console.log('*** cryptoserv-compatibility-match-hmac-from-java-with-node-test ***', error, res);
            console.timeEnd('cryptoserv-compatibility-match-hmac-from-java-with-node');
            next();
        });
    });

    after('keymaker shutdown', function(next) {
            TAKeyMakerClient.shutdown();
            next();
    });
});