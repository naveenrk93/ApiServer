/**
 * Created by klakhwani.
 */
'use strict';
var assert = require('assert');
var cal = require('cal');
var freshy = require('freshy');
var topos = require('topos');
var nconf = require('nconf');
var KeyMakerClient = require('../index');
cal.setDefaultWriteStream('console');
var kmClient;

describe('Application Context testing', function() {
    before('test-setup', function(next) {
        // Unload the keymakerclient module and reload it afresh
        // else create can't be made with different parameters
        var unloaded = freshy.unload('../index');
        console.log('Unloaded=' + unloaded);
        KeyMakerClient = require('../index');
        this.timeout(20000);
        process.env.SHARE_PWD = 'aardvark';
        var opt = {};
        opt.appname = 'keymakerapiclientnodeapp';
        opt.unitTest = true;
        process.env["keymakerapiCertPath"] = '/Users/klakhwani/GitHub/node-keymakerclientapi/test/resources/keymakerapi_cert.pem';
        // Initialize topo
        topos.init(nconf.get('topos'), nconf);

        KeyMakerClient.create(opt, function(err, obj) {
            if (err) {
                console.log('client-tests err obj: ' + err);
            }
            kmClient = obj;
            next();
        });
    });
    it('getAC_positive', function(next) {
        var servername = 'cryptoserv';
        kmClient.getAC(servername, function(error, response){
            assert(!error, 'Error: ' + error);
            assert(response, 'no response found');
            next();
        });
    });
    it('getAC_negative', function(next) {
        var servername = 'dummy';
        kmClient.getAC(servername, function(error, response){
            assert(error, 'No error');
            assert(!response, 'Response: ' + response);
            next();
        });
    });
    it('getExpiringAC_alreadyExpired', function(next) {
        var time = 0;
        kmClient.getExpiringAC(time, function(error, response){
            assert(!error, 'Error: ' + error);
            assert(response, 'No response found');
            assert(parseInt(response.length) > 0 , 'No expired ACs returned');
            next();
        })
    });
    it('getExpiringAC_aboutToExpire', function(next) {
        var time = 10800000; // 3 hours
        kmClient.getExpiringAC(time, function(error, response){
            assert(!error, 'Error: ' + error);
            assert(response, 'No response found');
            assert(parseInt(response.length) > 0, 'No expiring ACs in 3 hours returned');
            next();
        })
    });
    it('getExpiringAC_notExpiring', function(next) {
        var time = -1000000; // less than current time
        kmClient.getExpiringAC(time, function(error, response){
            assert(!error, 'Error: ' + error);
            assert(response, 'No response found');
            assert(parseInt(response.length) <= 0, 'No expired ACs should be returned');
            next();
        })
    });
    it('refreshAC_expired', function(next) {
        var acNames = ['keymakerapiclientnodeapp_keymakerclientapi_app_context'];  // expired with soft_expiry as false
        kmClient.refreshAC(acNames, function(error, response){
            assert(!error, 'Error: ' + error);
            assert(response, 'No response found');
            assert(response[acNames[0]] === false, 'ExpiredAC cannot be refreshed');
            next();
        })
    });
    it('refreshAC_aboutToExpire', function(next) {
        var acNames = ['keymakerapiclientnodeapp_kmfntstacserver_app_context'];  
        kmClient.refreshAC(acNames, function(error, response){
            assert(!error, 'Error: ' + error);
            assert(response, 'No response found');
            assert(response[acNames[0]] === true, 'AC was not refreshed');
            next();
        })
    });
    it('refreshAC_multiple', function(next) {
        var acNames = ['keymakerapiclientnodeapp_kmfntstacserver_app_context','keymakerapiclientnodeapp_cryptoserv_app_context'];  
        kmClient.refreshAC(acNames, function(error, response){
            assert(!error, 'Error: ' + error);
            assert(response, 'No response found');
            assert(response[acNames[0]] === true, 'AC was not refreshed');
            assert(response[acNames[1]] === true, 'AC was not refreshed');
            next();
        })
    });
    it('revokedAC', function(next) {
        kmClient.getRevokedAC(function(error, response){
            assert(!error, 'Error: ' + error);
            assert(response, 'No response found');
            assert(parseInt(JSON.parse(response).length) > 0, 'No revoked ACs returned');
            next();
        });
    });
    it('verifyPermission_correctPermission', function(next) {
        var appContext = 'eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJrZXltYWtlcnRlc3RjbGllbnRzZXJ2Iiwic2VjdXJpdHlfem9uZSI6ImhyeiIsInRlbmFudF9uYW1lIjoicGF5cGFsIiwiYXBwbGljYXRpb25fdHlwZSI6InJhcHRvciIsImlzcyI6ImtleW1ha2VyYXBpX3BheXBhbCIsInZlcnNpb24iOiIxLjAiLCJzb2Z0X2V4cGlyeSI6InRydWUiLCJhdWQiOiJrZXltYWtlcmFwaWNsaWVudG5vZGVhcHAiLCJhcHBsaWNhdGlvbl9uYW1lIjoia2V5bWFrZXJ0ZXN0Y2xpZW50c2VydiIsInBlcm1pc3Npb25zIjpbIm5vZGVfZW5jcnlwdCJdLCJleHAiOjE1MTg3NDY0NjUxNjcsImlhdCI6MTUxODc0Mjg2NTE2NywianRpIjo1MDAwMDAwMDE5fQ.b1O50bRXSDsuZbgDWcmrMGt5vrlZgh-0RgyVrDLsJhrBgILqydZn6wSdvGEyn2T6DIp0qqYAmrV-E82KeT4UYWUjXqCJo-kNqFQVg_ui3H-_UBNyMhQWe6qb4mUtr0kZHx-G0R20uGOBtvcZ6XvzpomF3LlolO8oXMPII0ADbyE';
        kmClient.verifyPermission(appContext, ['node_encrypt'], function(error, response){
            assert(!error, 'Error: ' + error);
            assert(response, 'No response found');
            assert(response === true, 'permission cannot be verified');
            next();
        });
    });
    it('verifyPermission_multipleCorrectPermissions', function(next) {
        var appContext = 'eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJrZXltYWtlcnRlc3RjbGllbnRzZXJ2Iiwic2VjdXJpdHlfem9uZSI6ImhyeiIsInRlbmFudF9uYW1lIjoicGF5cGFsIiwiYXBwbGljYXRpb25fdHlwZSI6InJhcHRvciIsImlzcyI6ImtleW1ha2VyYXBpX3BheXBhbCIsInZlcnNpb24iOiIxLjAiLCJzb2Z0X2V4cGlyeSI6InRydWUiLCJhdWQiOiJrZXltYWtlcmFwaWNsaWVudG5vZGVhcHAiLCJhcHBsaWNhdGlvbl9uYW1lIjoia2V5bWFrZXJ0ZXN0Y2xpZW50c2VydiIsInBlcm1pc3Npb25zIjpbIm5vZGVfZW5jcnlwdCJdLCJleHAiOjE1MTg3NDY0NjUxNjcsImlhdCI6MTUxODc0Mjg2NTE2NywianRpIjo1MDAwMDAwMDE5fQ.b1O50bRXSDsuZbgDWcmrMGt5vrlZgh-0RgyVrDLsJhrBgILqydZn6wSdvGEyn2T6DIp0qqYAmrV-E82KeT4UYWUjXqCJo-kNqFQVg_ui3H-_UBNyMhQWe6qb4mUtr0kZHx-G0R20uGOBtvcZ6XvzpomF3LlolO8oXMPII0ADbyE';
        kmClient.verifyPermission(appContext, ['node_encrypt', 'node_encrypt'], function(error, response){
            assert(!error, 'Error: ' + error);
            assert(response, 'No response found');
            assert(response === true, 'permission cannot be verified');
            next();
        });
    });
    it('verifyPermission_incorrectPermission', function(next) {
        var appContext = 'eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJrZXltYWtlcnRlc3RjbGllbnRzZXJ2Iiwic2VjdXJpdHlfem9uZSI6ImhyeiIsInRlbmFudF9uYW1lIjoicGF5cGFsIiwiYXBwbGljYXRpb25fdHlwZSI6InJhcHRvciIsImlzcyI6ImtleW1ha2VyYXBpX3BheXBhbCIsInZlcnNpb24iOiIxLjAiLCJzb2Z0X2V4cGlyeSI6InRydWUiLCJhdWQiOiJrZXltYWtlcmFwaWNsaWVudG5vZGVhcHAiLCJhcHBsaWNhdGlvbl9uYW1lIjoia2V5bWFrZXJ0ZXN0Y2xpZW50c2VydiIsInBlcm1pc3Npb25zIjpbIm5vZGVfZW5jcnlwdCJdLCJleHAiOjE1MTg3NDY0NjUxNjcsImlhdCI6MTUxODc0Mjg2NTE2NywianRpIjo1MDAwMDAwMDE5fQ.b1O50bRXSDsuZbgDWcmrMGt5vrlZgh-0RgyVrDLsJhrBgILqydZn6wSdvGEyn2T6DIp0qqYAmrV-E82KeT4UYWUjXqCJo-kNqFQVg_ui3H-_UBNyMhQWe6qb4mUtr0kZHx-G0R20uGOBtvcZ6XvzpomF3LlolO8oXMPII0ADbyE';
        kmClient.verifyPermission(appContext, ['raptor_decrypt'], function(error, response){
            assert(!error, 'Error: ' + error);
            assert(response === false, 'permission verified for incorrect permission');
            next();
        });
    });
    it('verifyPermission_multiplePermissionsOneIncorrect', function(next) {
        var appContext = 'eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJrZXltYWtlcnRlc3RjbGllbnRzZXJ2Iiwic2VjdXJpdHlfem9uZSI6ImhyeiIsInRlbmFudF9uYW1lIjoicGF5cGFsIiwiYXBwbGljYXRpb25fdHlwZSI6InJhcHRvciIsImlzcyI6ImtleW1ha2VyYXBpX3BheXBhbCIsInZlcnNpb24iOiIxLjAiLCJzb2Z0X2V4cGlyeSI6InRydWUiLCJhdWQiOiJrZXltYWtlcmFwaWNsaWVudG5vZGVhcHAiLCJhcHBsaWNhdGlvbl9uYW1lIjoia2V5bWFrZXJ0ZXN0Y2xpZW50c2VydiIsInBlcm1pc3Npb25zIjpbIm5vZGVfZW5jcnlwdCJdLCJleHAiOjE1MTg3NDY0NjUxNjcsImlhdCI6MTUxODc0Mjg2NTE2NywianRpIjo1MDAwMDAwMDE5fQ.b1O50bRXSDsuZbgDWcmrMGt5vrlZgh-0RgyVrDLsJhrBgILqydZn6wSdvGEyn2T6DIp0qqYAmrV-E82KeT4UYWUjXqCJo-kNqFQVg_ui3H-_UBNyMhQWe6qb4mUtr0kZHx-G0R20uGOBtvcZ6XvzpomF3LlolO8oXMPII0ADbyE';
        kmClient.verifyPermission(appContext, ['node_encrypt', 'node_decrypt'], function(error, response){
            assert(!error, 'Error: ' + error);
            assert(response === false, 'permission verified for incorrect permission');
            next();
        });
    });
    after('keymaker shutdown', function(next) {
        KeyMakerClient.shutdown();
        next();
    });
});