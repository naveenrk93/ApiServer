'use strict';
var assert = require('assert');
var cal = require('cal');
var topos = require('topos');
var nconf = require('nconf');
var rewire = require("rewire");
var kmClient;

cal.setDefaultWriteStream('console');

function revokedAppName() {
    return 'revokedtestapp';
}
function revokedAppContextName() {
    return 'revokedtestapp_cryptoserv_app_context';
}
var TAKeyMakerClient;

describe('revokedtestapp-api-positive', function() {        
    // setting up vault
    before('revokedtestapp-test-setup', function(next) {
        TAKeyMakerClient = rewire('../lib/KeyMakerClient');
        TAKeyMakerClient.__set__("utils.getAppName", revokedAppName);
        TAKeyMakerClient.__set__("utils.getAppContextName", revokedAppContextName);
        console.time('revokedtestapp-test-setup');
        this.timeout(20000);
        process.env.SHARE_PWD = 'aardvark';                    
        var opt = {};
        opt.appname = 'revokedtestapp';
        opt.unitTest = true;

        // Initialize topo
        topos.init(nconf.get('topos'), nconf);        
             
        TAKeyMakerClient.create(opt, function(err, obj) {
            if (err) {
                console.log('client-tests err obj: ' + err);
            }
            kmClient = obj;
            console.timeEnd('revokedtestapp-test-setup');
            next();
        });                    
    });
                
    it('revokedTestApp-cryptoserv-encrypt-decrypt-operation', function(next) {
        this.timeout(20000);
        var requestObject = {
            keyId: '101',
            data: new Buffer('05940893650789087'),
            isPKCS7: false
        };
        console.time('revokedtestapp-cryptoserv-encrypt-decrypt-operation');

        try {         
            kmClient.encrypt(requestObject, function(error, res) {
                assert(!error, 'No error');
                assert(res.response_code === 200);
                assert(res.result);
                assert(typeof res.result.encodedData === 'string', 'encrypt api output expected to be a string');
                console.log('*** revokedtestapp-cryptoserv-encrypt-decrypt-operation-test : ENCRYPT ***', error, res);

                requestObject = {
                    keyId: '101',
                    data: res.result.encodedData,
                    isPKCS7: false
                };

                kmClient.decrypt(requestObject, function(error, res) {
                    assert(error, 'Error expected');
                    assert(!res, 'No response');                    
                    assert(error.error_code === 24);
                    console.timeEnd('revokedtestapp-cryptoserv-encrypt-decrypt-operation');
                                                        
                    next();
                });
            });                        
        } catch(err) {
            return next(err);
        }                                  
    });

    it('cryptoserv-compatibility-match-hmac-from-java-with-node', function(next) {
        this.timeout(20000);
        console.time('cryptoserv-compatibility-match-hmac-from-java-with-node');
        var requestObject = {
            keyId: '101',
            data: new Buffer('compatibility test #101')
        };
        kmClient.hmac(requestObject, function(error, res) {
            assert(!error, 'No error');
            assert(res.response_code === 200);
            assert(res.result);
            assert(res.result.encodedData === 'oIAm0dlUysEhdX5q7amlyqgpg1Y=', 'expected to be equal');
            console.log('*** rvtestapp-cryptoserv-compatibility-match-hmac-from-java-with-node-test ***', error, res);            
            next();
        });
    });

    after('keymaker shutdown', function(done) {
        TAKeyMakerClient.shutdown();
        done();
    });
});
