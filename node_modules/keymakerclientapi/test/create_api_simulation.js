'use strict';
var assert = require('assert');
var cal = require('cal');
cal.setDefaultWriteStream('console');
var freshy = require('freshy');
var fs = require('fs');
var KeyMakerClient = require('../index');
var path = require('path');

function replaceAgentPassPhrase(undo, callback) {
    var dir = path.dirname(require.resolve('testkeystore/package.json'));

    fs.readFile(dir + '/protected.cfg', 'utf-8', function (err, data) {
        if (err) {
            console.log("Error reading file.");
            return callback(new Error('Error reading file.'));
        }
        else {
            if (!undo) {
                var newValue = data.replace('encrypted_keymaker_agent_passphrase', 'keymaker_agent_passphrase');
                fs.writeFile(dir + '/protected.cfg', newValue, 'utf-8', function (err) {
                    if (err) {
                        console.log('Modifying testkeystore to simulate vault creation failure FAILED: ' + dir);
                        return callback(new Error('Modifying testkeystore to simulate vault creation failure FAILED: ' + dir));
                    }
                    return callback (null);
                });
            } else {
                var oldValue = data.replace('keymaker_agent_passphrase', 'encrypted_keymaker_agent_passphrase');
                fs.writeFile(dir + '/protected.cfg', oldValue, 'utf-8', function (err) {
                    if (err) {
                        console.log('Error in reverting testkeystore ' + dir);
                        return callback(new Error('Error in reverting testkeystore: ' + dir));
                    }
                    return callback(null);
                });
            }
        }
    });
}
describe('create-api-failure', function() {

    it('vaultBadData - validation should not pass', function(next) {
        // Unload the keymakerclient module and reload it afresh
        // else create can't be made with different parameters
        var unloaded = freshy.unload('../index');
        console.log('Unloaded=' + unloaded);
        KeyMakerClient = require('../index');

        this.timeout(20000);
        process.env.SHARE_PWD = 'aardvark';
        var opt = {};
        opt.appname = 'keymakerapiclientnodeapp';
        opt.unitTest = true;
        //modifying the testkeystore
        replaceAgentPassPhrase(false, function () {
            KeyMakerClient.create(opt, function(err, obj) {
                if (err) {
                    assert(err);
                    assert(obj === undefined, 'expecting keymakerclient object to be undefined')
                }
                console.log('kmClient object is ' + obj);
                KeyMakerClient.shutdown();
                next();
            });
        });
    });

    it('vaultCorrectData - validation should pass', function(next) {
        // Unload the keymakerclient module and reload it afresh
        // else create can't be made with different parameters
        var unloaded = freshy.unload('../index');
        console.log('Unloaded=' + unloaded);
        KeyMakerClient = require('../index');

        this.timeout(20000);
        process.env.SHARE_PWD = 'aardvark';
        var opt = {};
        opt.appname = 'keymakerapiclientnodeapp';
        opt.unitTest = true;
        //revert the testkeystore
        var revert = true;
        replaceAgentPassPhrase(revert, function () {
            KeyMakerClient.create(opt, function(err, obj) {
                assert(!err);
                assert(obj, 'expecting keymaker client object to be created successfully');
                KeyMakerClient.shutdown();
                next();
            });
        });
    });

    // This test should follow the vaultCorrectData- validation should pass test case
    // to ensure that the testKeyStore has been reverted as expected.
    it('whenAgentOrApiIsDown-NON_DEV_MODE-hardFailureFlagDisabled', function(next) {
        // Unload the keymakerclient module and reload it afresh
        // else create can't be made with different parameters
        var unloaded = freshy.unload('../index');
        console.log('Unloaded=' + unloaded);
        KeyMakerClient = require('../index');
        this.timeout(20000);
        process.env.SHARE_PWD = 'aardvark';
        var opt = {};
        opt.appname = 'keymakerapiclientnodeapp';
        opt.host = '127.0.0.1'; // some IP address which doesn't have the keymakeragent running
        opt.unitTest = true;
        // the below test config needs to be sent to make the code work in QA mode
        process.env.DEPLOY_ENV = 'QA';
        var testConfig = {};
        testConfig.dir     = path.dirname(require.resolve('testkeystore/package.json'));
        testConfig.cfgName = 'protected.cfg';
        testConfig.keyName = 'key.pem';
        testConfig.certName = 'cert.pem';
        testConfig.trustedClientsName = 'trusted_clients.pem';
        testConfig.trustedServersName = 'trusted_servers.pem';

        opt.changeToVaultTestConfig = testConfig;

        KeyMakerClient.create(opt, function(err, obj) {
            var non_zombie_client = obj;

            var requestObject = {
                keyId: 'encrypted_mayflysession_crypt_key',
                data: new Buffer('arunkuma'),
                isPKCS7: false
            };
            assert(!err, 'Client needs to be created. Error: ' + err);
            assert(non_zombie_client, 'client needs to be created');
            non_zombie_client.encrypt(requestObject, function(error, res) {
                assert(!error, 'No error');
                assert(res.response_code === 200);
                assert(res.result);
                // We are ensuring keymakerclient.create returns back kmsclient object even if there was a failure in 
                // km_key_fetch for DEV and NON-DEV env when hard failure is disabled.
                // console.log('*** nonzombie-encrypt-test ***', error, res);
                requestObject.data = res.result.encodedData;

                non_zombie_client.decrypt(requestObject, function(err, decryptObj) {
                    assert(!error, 'No error');
                    assert(res.response_code === 200);
                    assert(res.result);
                    console.log('*** nonzombie-createapi-test ***', err, decryptObj.result.plainData.toString());
                    next();
                });
            });

        });
    });
    // Follows the whenAgentOrApiIsDown-NON_DEV_MODE-hardFailureFlagDisabled previous setup.
    it('perform-crypto-with-nonzombie-client', function(next) {
        var requestObject = {
            keyId: 'encrypted_mayflysession_crypt_key',
            data: new Buffer('arunkuma'),
            isPKCS7: false
        };
        var client = KeyMakerClient.getClient();
        // Before the fix in 1.3.2, this would fail badly for any app on all ENV
        assert(client, 'client needs to be created');

        client.encrypt(requestObject, function(error, res) {
            assert(!error, 'No error');
            assert(res.response_code === 200);
            assert(res.result);
            // console.log('*** nonzombie-encrypt-test ***', error, res);

            requestObject.data = res.result.encodedData;

            client.decrypt(requestObject, function(err, decryptObj) {
                assert(!error, 'No error');
                assert(res.response_code === 200);
                assert(res.result);
                console.log('*** nonzombie-getclient-test ***', err, decryptObj.result.plainData.toString());
                next();
            });
        });
    });

    after('keymaker shutdown', function(next) {
        process.env.DEPLOY_ENV = '';
        KeyMakerClient.shutdown();
        next();
    });
});
