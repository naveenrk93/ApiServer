'use strict';
var assert = require('assert');
var cal = require('cal');
var freshy = require('freshy');
var KeyMakerClient = require('../index');
cal.setDefaultWriteStream('console');
var kmClient;

describe('keymaker-ssoConfig-testing', function() {
    before('test-setup', function(next) {
        // Unload the keymakerclient module and reload it afresh
        // else create can't be made with different parameters
        var unloaded = freshy.unload('../index');
        console.log('Unloaded=' + unloaded);
        KeyMakerClient = require('../index');
        this.timeout(20000);
        process.env.SHARE_PWD = 'aardvark';
        var opt = {};
        opt.appname = 'keymakerapiclientnodeapp';
        opt.unitTest = true;
        KeyMakerClient.create(opt, function(err, obj) {
            if (err) {
                console.log('client-tests err obj: ' + err);
            }
            kmClient = obj;
            next();
        });
    });

    it('getSSOConfig', function(next) {
        var requestObject = {
            keyId: 'node_sso_keystore'
        };
        console.time('getSSOConfig-TimeTaken');
        kmClient.getSSOConfig(requestObject, function(err, res) {
            assert(!err, 'No err is expected');
            assert(res, 'response is expected');
            assert(res.response_code === 200, 'status 200');
            console.log(res.result.clientPrivateKey);
            console.log(res.result.clientPublicCert);
            console.log(res.result.trustedCert);
            console.timeEnd('getSSOConfig-TimeTaken');
            next();
        });
    });
    after('keymaker shutdown', function(next) {
        KeyMakerClient.shutdown();
        next();
    });
});
