'use strict';
var assert = require('assert');
var base64 = require('base64-paypal');
var cal = require('cal');
cal.setDefaultWriteStream('console');
var freshy = require('freshy');
var KeyMakerClient = require('../index');

var kmClient;
var infraCryptoAPI;
var testResultData = {};

testResultData.gcmencryptOperation;
testResultData.desEncryptOutput;
testResultData.aes128EncryptOutput;
testResultData.aes256EncryptOutput;
testResultData.sealdesxsha1Output;

function contains(haystack, needle) {
    var n = haystack.indexOf(needle);
    if (n > 0) {
        return true;
    } else {
        return false;
    }
}


describe('keymaker-InfraCryptoprovider', function() {

    before('create keymakerclient object first time', function(next) {
        // Unload the keymakerclient module and reload it afresh
        // else create can't be made with different parameters
        var unloaded = freshy.unload('../index');
        console.log('Unloaded=' + unloaded);
        KeyMakerClient = require('../index');
        this.timeout(20000);
        process.env.SHARE_PWD = 'aardvark';
        var opt = {};
        opt.appname = 'keymakerapiclientnodeapp';
        opt.isAgentEnabled = true;
        opt.unitTest = true;
        KeyMakerClient.create(opt, function(err, obj) {
            if (err) {
                console.log('client-tests err obj: ' + err);
            }
            kmClient = obj;
            infraCryptoAPI = KeyMakerClient.getInfraCryptoAPI();
            next();
        });
    });

    it('encrypt-gcm-operation', function(next) {
        var requestObject = {
            keyId: 'encrypted_test_aes_gcm_crypt_key',
            data: new Buffer('arun kumar elengovan is a the developer who worked on this client and this is a real huge text to encrypt'),
            isPKCS7: false
        };
        try {
            var res = infraCryptoAPI.encrypt(requestObject);
            assert(res.response_code === 200);
            assert(res.result);
            console.log('*** gcm-encrypt-operation-test ***', res);
            testResultData.gcmencryptOperation = res.result.encodedData;
        } catch (e) {
            var expectedErrorMsg = 'Local aes_gcm_encrypt is not supported in node v0.10.x and below';
            // probably running version node v0.10.x
            // skipping this unit test
            if (!contains(JSON.stringify(e), expectedErrorMsg)) assert(false, 'Not expected to throw an error');
        }
        next();
    });

    it('decrypt-gcm-operation', function(next) {
        var requestObject = {
            keyId: 'encrypted_test_aes_gcm_crypt_key',
            data: testResultData.gcmencryptOperation,
            isPKCS7: false
        };
        var expectedText = 'arun kumar elengovan is a the developer who worked on this client and this is a real huge text to encrypt';
        try {
            var res = infraCryptoAPI.decrypt(requestObject);
            assert(res.response_code === 200);
            assert(res.result);
            console.log('*** gcm-decrypt-operation-test ***', res);
            assert(base64.decode(res.result.encodedData).toString() === expectedText, 'should match plain text after decode');
            assert(res.result.plainData instanceof Buffer, 'type expected to be Buffer');
            assert(res.result.plainData.toString() === expectedText, 'should match plain text');
            console.log(res.result.plainData.toString());
        } catch (e) {
            var expectedErrorMsg = 'expected data in params object, check api usage';
            // probably running version node v0.10.x
            // skipping this unit test
            if (!contains(JSON.stringify(e), expectedErrorMsg)) assert(false, 'Not expected to throw an error');
        }
        next();
    });
    it('des-encrypt-operation', function(next) {
        var requestObject = {
            keyId: 'encrypted_test_cryptutil_crypt_key',
            data: new Buffer('arunkuma'),
            isPKCS7: false
        };
        console.time('des-encrypt-operation');
        try {
            var res = infraCryptoAPI.encrypt(requestObject);

            console.log('*** des-encrypt-operation-test ***', res);
            console.timeEnd('des-encrypt-operation');
            testResultData.desEncryptOutput = res.result.encodedData;
            assert(typeof res.result.encodedData === 'string', 'encrypt api output expected to be a string');
        } catch (e) {
            assert(false, 'Not expected to throw an error');
        }
        next();
    });

    it('des-decrypt-operation', function(next) {
        var requestObject = {
            keyId: 'encrypted_test_cryptutil_crypt_key',
            data: testResultData.desEncryptOutput,
            isPKCS7: false
        };
        console.time('des-decrypt-operation');
        try {
            var res = infraCryptoAPI.decrypt(requestObject);

            console.log('*** des-decrypt-operation-test ***', res);
            console.timeEnd('des-decrypt-operation');
            //assert(base64.decode(res.result.encodedData).toString() === 'arunkuma', 'expected to be equal');
            assert(res.result.plainData instanceof Buffer, 'type expected to be Buffer');
            assert(res.result.plainData.toString() === 'arunkuma', 'expected to be equal');
        } catch (e) {
            assert(false, 'Not expected to throw an error');
        }
        next();
    });

    it('des-decrypt-operation-diffencoding', function(next) {
        var requestObject = {
            keyId: 'encrypted_test_cryptutil_crypt_key',
            data: 'iGPVfH0ZrNo=',
            isPKCS7: false
        };
        console.time('des-decrypt-operation-diffencoding');
        try {
            var res = infraCryptoAPI.decrypt(requestObject);

            console.log('*** des-decrypt-operation-diffencoding-test ***', res);
            console.timeEnd('des-decrypt-operation-diffencoding');
            assert(base64.decode(res.result.encodedData).toString() === 'thetést', 'expected to be equal');
            assert(res.result.plainData instanceof Buffer, 'type expected to be Buffer');
            assert(res.result.plainData.toString('hex') === '74686574c3a97374', 'expected to be equal');
            assert(res.result.plainData.toString() === 'thetést', 'expected to be equal');
        } catch (e) {
            assert(false, 'Not expected to throw an error');
        }
        next();
    });

    it('aes128-encrypt-operation', function(next) {
        var requestObject = {
            keyId: 'encrypted_cookie_bag_crypt_key',
            data: new Buffer('1234567887654321'),
            isPKCS7: false
        };
        console.time('aes128-encrypt-operation');
        try {
            var res = infraCryptoAPI.encrypt(requestObject);

            console.log('*** aes128-encrypt-operation-test ***', res);
            console.timeEnd('aes128-encrypt-operation');
            testResultData.aes128EncryptOutput = res.result.encodedData;
            console.log(typeof res.result.encodedData);
            assert(typeof res.result.encodedData === 'string', 'encrypt api output expected to be a string');
        } catch (e) {
            assert(false, 'Not expected to throw an error');
        }
        next();
    });

    it('aes128-decrypt-operation', function(next) {
        var requestObject = {
            keyId: 'encrypted_cookie_bag_crypt_key',
            data: testResultData.aes128EncryptOutput,
            isPKCS7: false
        };
        console.time('aes128-decrypt-operation');
        try {
            var res = infraCryptoAPI.decrypt(requestObject);

            console.log('*** aes128-decrypt-operation-test ***', res);
            console.timeEnd('aes128-decrypt-operation');
            assert(base64.decode(res.result.encodedData).toString() === '1234567887654321', 'expected to be equal');
            assert(res.result.plainData instanceof Buffer, 'type expected to be Buffer');
            assert(res.result.plainData.toString() === '1234567887654321', 'expected to be equal');
        } catch (e) {
            assert(false, 'Not expected to throw an error');
        }
        next();
    });

    it('aes256-encrypt-operation', function(next) {
        var requestObject = {
            keyId: 'encrypted_yamsession_crypt_key',
            data: new Buffer('12345678876543211234567887654321'),
            isPKCS7: false
        };
        console.time('aes256-encrypt-operation');
        try {
            var res = infraCryptoAPI.encrypt(requestObject);

            console.log('*** aes256-encrypt-operation-test ***', res);
            console.timeEnd('aes256-encrypt-operation');
            testResultData.aes256EncryptOutput = res.result.encodedData;
            assert(typeof res.result.encodedData === 'string', 'encrypt api output expected to be a string');
        } catch (e) {
            assert(false, 'Not expected to throw an error');
        }
        next();
    });

    it('aes256-decrypt-operation', function(next) {
        var requestObject = {
            keyId: 'encrypted_yamsession_crypt_key',
            //data: ['zBxYWv/0QczU8H9pFDmRNh943e6FPewa5TP6pGh8tzKVWBkUwLF8qOPkWXIQKefW'],
            data: testResultData.aes256EncryptOutput,
            isPKCS7: false
        };
        console.time('aes256-decrypt-operation');
        try {
            var res = infraCryptoAPI.decrypt(requestObject);

            console.log('*** aes256-decrypt-operation-test ***', res);
            console.timeEnd('aes256-decrypt-operation');
            assert(base64.decode(res.result.encodedData).toString() === '12345678876543211234567887654321', 'expected to be equal');
            assert(res.result.plainData instanceof Buffer, 'type expected to be Buffer');
            assert(res.result.plainData.toString() === '12345678876543211234567887654321', 'expected to be equal');
        } catch (e) {
            assert(false, 'Not expected to throw an error');
        }
        next();
    });

    it('hmac-operation', function(next) {
        console.time('hmac-operation');
        var requestObject = {
            keyId: 'encrypted_test_cryptutil_mac_key',
            data: new Buffer('12345678')
        };
        try {
            var res = infraCryptoAPI.hmac(requestObject);
            assert(res.response_code === 200);
            assert(res.result);
            assert(res.result.encodedData === 'BZFVnN3tbICbnJSHzMGDnAaqgIA=', 'expected to be equal');
            console.log('*** hmac-operation-test ***', res);
            console.timeEnd('hmac-operation');
        } catch (e) {
            assert.fail(false, 'Not expected to throw exception');
        }
        next();
    });

    it('seal-operation', function(next) {
        console.time('seal-operation');
        var requestObject = {
            cryptKeyId: 'encrypted_test_cryptutil_crypt_key',
            macKeyId: 'encrypted_test_cryptutil_mac_key',
            data: new Buffer('arunkumar')
        };
        try {
            var res = infraCryptoAPI.seal(requestObject);
            assert(res.response_code === 200);
            assert(res.result);
            //assert(res.result.keyId === requestObject.keyId);
            console.log('*** seal-operation-test ***', res);
            console.timeEnd('seal-operation');
            testResultData.sealdesxsha1Output = res.result.encodedData;
        } catch (e) {
            assert.fail(false, 'Not expected to throw exception');
        }
        next();
    });

    it('unseal-operation', function(next) {
        console.time('unseal-operation');
        var requestObject = {
            cryptKeyId: 'encrypted_test_cryptutil_crypt_key',
            macKeyId: 'encrypted_test_cryptutil_mac_key',
            data: testResultData.sealdesxsha1Output
        };
        try {
            var res = infraCryptoAPI.unseal(requestObject);
            assert(res.response_code === 200);
            assert(res.result);
            console.log('*** unseal-operation-test ***', res);
            console.timeEnd('unseal-operation');
            assert(base64.decode(res.result.encodedData).toString() === 'arunkumar', 'expected to be equal');
            assert(res.result.plainData instanceof Buffer, 'type expected to be Buffer');
            assert(res.result.plainData.toString() === 'arunkumar', 'expected to be equal');
        } catch (e) {
            assert.fail(false, 'Not expected to throw exception');
        }
        next();
    });

    it('secretprovider-operation', function(next) {
        console.time('secretprovider-operation');
        var requestObject = {
            keyId: 'encrypted_devplat_oracle_password'
        };
        try {
            var res = infraCryptoAPI.getSecret(requestObject);
            assert(res.response_code === 200);
            assert(res.result);
            assert(res.result.keyId === requestObject.keyId);
            assert(base64.decode(res.result.encodedData).toString() === 'devplatappstg', 'expected to be equal');
            assert(res.result.plainData instanceof Buffer, 'type expected to be Buffer');
            assert(res.result.plainData.toString() === 'devplatappstg', 'expected to be equal');
            console.log('*** secretprovider-operation-test ***', res);
            console.timeEnd('secretprovider-operation');
        } catch (e) {
            assert.fail(false, 'Not expected to throw exception');
        }
        next();
    });


    it('seal-operation-missing-macKeyId-throws-exception', function(next) {
        console.time('seal-operation');
        var requestObject = {
            cryptKeyId: 'encrypted_test_cryptutil_crypt_key',
            data: new Buffer('arunkumar')
        };
        try {
            infraCryptoAPI.seal(requestObject);
        } catch (e) {
            var expectedErrorMsg = 'keyId is mandatory in params, check api usage';
            assert(e, 'expected exception to be thrown');
            assert(contains(JSON.stringify(e), expectedErrorMsg), 'Does not contain expected string in error message');
        }
        next();
    });

    it('unseal-operation-missing-cryptKeyId-throws-exception', function(next) {
        console.time('seal-operation');
        var requestObject = {
            macKeyId: 'encrypted_test_cryptutil_mac_key',
            data: testResultData.sealdesxsha1Output
        };
        try {
            infraCryptoAPI.unseal(requestObject);
        } catch (e) {
            var expectedErrorMsg = 'keyId is mandatory in params, check api usage';
            assert(e, 'expected exception to be thrown');
            assert(contains(JSON.stringify(e), expectedErrorMsg), 'Does not contain expected string in error message');
        }
        next();
    });

    it('passing-empty-inputObject-throws-exception', function(next) {
        var requestObject = {};
        try {
            infraCryptoAPI.encrypt(requestObject);
        } catch (e) {
            var expectedErrorMsg = 'keyId is mandatory in params, check api usage';
            assert(e, 'expected exception to be thrown');
            assert(contains(JSON.stringify(e), expectedErrorMsg), 'Does not contain expected string in error message');
        }
        next();
    });

    it('passing-no-inputObject-throws-exception', function(next) {
        var requestObject;
        try {
            infraCryptoAPI.encrypt(requestObject);
        } catch (e) {
            var expectedErrorMsg = 'params object is mandatory input, check api usage';
            assert(e, 'expected exception to be thrown');
            assert(contains(JSON.stringify(e), expectedErrorMsg), 'Does not contain expected string in error message');
        }
        next();
    });

    after('keymaker shutdown', function(next) {
        KeyMakerClient.shutdown();
        next();
    });
});
