/**
 * Created by klakhwani on 11/3/16.
 */
'use strict';
var assert = require('assert');
var cal = require('cal');
var freshy = require('freshy');
var KeyMakerClient = require('../index');
var keyStore = require('../lib/KeyCache');
var keyMakerprops = require('../lib/KeyMakerProperties');
cal.setDefaultWriteStream('console');
var kmClient;

describe('keymaker-individual-Keypair-Cert-testing', function() {
    before('test-setup', function(next) {
        // Unload the keymakerclient module and reload it afresh
        // else create can't be made with different parameters
        var unloaded = freshy.unload('../index');
        console.log('Unloaded=' + unloaded);
        KeyMakerClient = require('../index');
        this.timeout(20000);
        process.env.SHARE_PWD = 'aardvark';
        var opt = {};
        opt.appname = 'keymakerapiclientnodeapp';
        opt.unitTest = true;
        KeyMakerClient.create(opt, function(err, obj) {
            if (err) {
                console.log('client-tests err obj: ' + err);
            }
            kmClient = obj;
            next();
        });
    });

    it('individual keypair', function(next) {
        var keymakerKeyStore = keyStore.getKMKeyStoreCache('individual_keypairs_certificates_keymaker');
        var keyName = 'mykey3';
        var maxVersion = keyMakerprops.getMaxVersion(keyName);
        keyName = keyName + '_' + maxVersion;
        assert(keymakerKeyStore, 'individual_keypairs_certificates_keymaker.nks is not available');
        assert(!(Object.keys(keymakerKeyStore).length === 0), 'individual_keypairs_certificates_keymaker.nks is not empty');
        assert(keymakerKeyStore[keyName], 'mykey3 is available in keystore');
        assert(keymakerKeyStore[keyName].privateKey, 'privateKey for mykey3 is available in keystore');
        assert(keymakerKeyStore[keyName].publicCerts, 'publicCerts for mykey3 are available in keystore');
        next();
    });

    it('individual certificate', function (next) {
        var keymakerKeyStore = keyStore.getKMKeyStoreCache('individual_keypairs_certificates_keymaker');
        var certName = 'digicert_global_ca';
        var maxVersion = keyMakerprops.getMaxVersion(certName);
        certName = certName + '_' + maxVersion;
        assert(keymakerKeyStore, 'individual_keypairs_certificates_keymaker.nks is available');
        assert(!(Object.keys(keymakerKeyStore).length === 0), 'individual_keypairs_certificates_keymaker.nks is not empty');
        assert(keymakerKeyStore[certName], 'digicert_global_ca is available in keystore');
        assert(keymakerKeyStore[certName].publicCerts, 'certificate digicert_global_ca is available in keystore');
        next();
    });

    after('keymaker shutdown', function(next) {
        KeyMakerClient.shutdown();
        next();
    });
});