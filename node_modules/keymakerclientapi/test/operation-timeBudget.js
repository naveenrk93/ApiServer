'use strict';
var assert = require('assert');
var base64 = require('base64-paypal');
var KeyMakerClient = require('../index');
var freshy = require('freshy');
var cal = require('cal');
cal.setDefaultWriteStream('console');
var kmClient;

cal.setDefaultWriteStream('console');

function contains(haystack, needle) {
    var n = haystack.indexOf(needle);
    if (n > 0) {
        return true;
    } else {
        return false;
    }
}
describe('keymaker-timebudget-testing', function() {
    before('test-setup', function(next) {
        // Unload the keymakerclient module and reload it afresh
        // else create can't be made with different parameters
        var unloaded = freshy.unload('../index');
        console.log('Unloaded=' + unloaded);
        KeyMakerClient = require('../index');

        console.time('test-setup');
        this.timeout(20000);
        process.env.SHARE_PWD = 'aardvark';
        var opt = {};
        opt.isAgentEnabled = true;
        opt.appname = 'keymakerapiclientnodeapp';
        opt.socketTimeout = 0.0001;
        opt.unitTest = true;
        KeyMakerClient.create(opt, function(err, obj) {
            if (err) {
                console.log('client-tests err obj: ' + err);
            }
            kmClient = obj;
            console.timeEnd('test-setup');
            next();
        });
    });
    it('pkcs7-sign-timeBudgetExceeded', function(next) {
        console.time('pkcs7-sign-timeBudgetExceeded');
        var requestObject = {
            keyId: 'mykey3',
            // keyId: 'testkeypair_test',
            data: [base64.encode('arunkumar').toString()],
            isPKCS7: true,
        };
        kmClient.sign(requestObject, function(error, res) {
            assert(error, 'Expecting error');
            assert(!res, 'Response not expected');
            assert(error.errno === 'ETIMEDOUT', 'Expected code is ETIMEDOUT');
            var expectedErrorMsg = 'SLA Exceeded: Entire response not received from KeyMakerAgent within SLA';
            assert(contains(JSON.stringify(error), expectedErrorMsg), 'Expected Error Message Not Found');
            console.timeEnd('pkcs7-sign-timeBudgetExceeded');
            next();
        });
    });
    it('pkcs7-verify-timeBudgetExceeded', function(next) {
        console.time('pkcs7-verify-timeBudgetExceeded');
        var requestObject = {
            keyId: 'mykey3',
            // keyId: 'testkeypair_test',
            data: [],
            signedData: ['LS0tLS1CRUdJTiBQS0NTNy0tLS0tCk1JSUdOZ1lKS29aSWh2Y05BUWNDb0lJR0p6Q0NCaU1DQVFFeEN6QUpCZ1VyRGdNQ0dnVUFNQmdHQ1NxR1NJYjMKRFFFSEFhQUxCQWxoY25WdWEzVnRZWEtnZ2dON01JSURkekNDQWwrZ0F3SUJBZ0lFSjBPM0R6QU5CZ2txaGtpRwo5dzBCQVFzRkFEQnNNUkF3RGdZRFZRUUdFd2RWYm10dWIzZHVNUkF3RGdZRFZRUUlFd2RWYm10dWIzZHVNUkF3CkRnWURWUVFIRXdkVmJtdHViM2R1TVJBd0RnWURWUVFLRXdkVmJtdHViM2R1TVJBd0RnWURWUVFMRXdkVmJtdHUKYjNkdU1SQXdEZ1lEVlFRREV3ZFZibXR1YjNkdU1CNFhEVEV6TURneU9ERTROREF5TUZvWERURTNNVEF3TmpFNApOREF5TUZvd2JERVFNQTRHQTFVRUJoTUhWVzVyYm05M2JqRVFNQTRHQTFVRUNCTUhWVzVyYm05M2JqRVFNQTRHCkExVUVCeE1IVlc1cmJtOTNiakVRTUE0R0ExVUVDaE1IVlc1cmJtOTNiakVRTUE0R0ExVUVDeE1IVlc1cmJtOTMKYmpFUU1BNEdBMVVFQXhNSFZXNXJibTkzYmpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQwpnZ0VCQU5SWjY3anlWU05sUjBBdGdFaHBSUjFqUCtnUlFtZlJsbE1zcnkwWmpTWDVoTXRlT3dqM05rSG1ZVlZ2Ck12d0xYOTVWSmRxakpFc1hqKzdYOWtmQUxlS0UrMk1MUzhvQmU4R3ZzWnB5elNyN29kUHoyTkFHNG1ObjNVbXYKTzF5WHFSQ2VieDJlam8xbUFZSldvNXdFdVRNNy9HNW1pbC9JdytGdC9heFh5YU5hNUY2eGNlVTBYQUJkWWpTOQplYkxsNjFjdUlaNjUvdjlCNDJNRG80a1diUmdVdEd0L0w5VzNsQ1dMZzZlcU42ZjNwOHFQd05maE5GTjVyb1IwCjNRK0dmUGdsbGJwemwzYXpqaFJSalIxb1Q0U3E3V0htWUFjQUx5UEYxY3RoWjVxZEtlanVBRlNibWgwclhGWEkKYVZMbW5nMmh6TUIxTStjUHlQaGEvalZCYkhNQ0F3RUFBYU1oTUI4d0hRWURWUjBPQkJZRUZCOHlmb1QxS2NkSApwdFdGRVVkK1RkN2xhdXBqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDL2VXNlEvandRdXJORlZWaUhZR0RRCm80K0JydzVOOGU1T294NTZ1bUUzSWxGY2hwTGYrWU50RjBNZ0gwZFBtbm5yaG9FL21NWDBDdWVNMmxNMyszTWEKZXRSTlFYb2ZBSDVFR0Z5azlvK2N2NDdJdjRVMENKZWhZdEszN0VYVDVGaGlDOFlKa0xvNWtGd3RndUVnSGJ1bwpkazcvbHEvY1ZES2NvbFN6cTZqL0s5NVMzZzl6eVRDSndXY3RLVGhXNENDb3NaM2xIZiszYWJPNk9wWVpWVG1OCjJZdVNvbEl6SGovWXVlb3hyUHkwT0NRQ1BzS2xzRG8vRk9IN0JMRm4xRlVjazI0Ni9UUHhPcUtoVlNtVWFEU0oKby9tNDdaUEJvM3BnVmxmNE4xRjRYQzN6M2dybXdrbmNzZE4xK2YwUlVHWnUxcXl3Z1IzdGRoMlBYVDBUVUNDWQpNWUlDZGpDQ0FuSUNBUUV3ZERCc01SQXdEZ1lEVlFRR0V3ZFZibXR1YjNkdU1SQXdEZ1lEVlFRSUV3ZFZibXR1CmIzZHVNUkF3RGdZRFZRUUhFd2RWYm10dWIzZHVNUkF3RGdZRFZRUUtFd2RWYm10dWIzZHVNUkF3RGdZRFZRUUwKRXdkVmJtdHViM2R1TVJBd0RnWURWUVFERXdkVmJtdHViM2R1QWdRblE3Y1BNQWtHQlNzT0F3SWFCUUNnZ2RndwpHQVlKS29aSWh2Y05BUWtETVFzR0NTcUdTSWIzRFFFSEFUQWNCZ2txaGtpRzl3MEJDUVV4RHhjTk1UVXdPVEE0Ck1UWXpNakkyV2pBakJna3Foa2lHOXcwQkNRUXhGZ1FVY0Y0L1ZSdmg4QjNjeGg5cXVGVFcxOUZLTzhjd2VRWUoKS29aSWh2Y05BUWtQTVd3d2FqQUxCZ2xnaGtnQlpRTUVBU293Q3dZSllJWklBV1VEQkFFV01Bc0dDV0NHU0FGbApBd1FCQWpBS0JnZ3Foa2lHOXcwREJ6QU9CZ2dxaGtpRzl3MERBZ0lDQUlBd0RRWUlLb1pJaHZjTkF3SUNBVUF3CkJ3WUZLdzREQWdjd0RRWUlLb1pJaHZjTkF3SUNBU2d3RFFZSktvWklodmNOQVFFQkJRQUVnZ0VBTElrSjFDbjYKUWZjUEJyN3lZNFk5K0ZXVmJOSHNvRGIzRUJaNHNYcEd0UkltRVhMS1poc3R6TkVlVXI5R2hsNXBtN29ndDFVSgpPb0ZDNVI0SHVyTHJnWkZIT2puWTlsTzJvby9IYzhXV2xocWg5cHJFZ044REhqK2FHbVlMOTNRWm15alZ3eWhrCjRIWG5BdW5uZmp2R05zUVpmS3hNeDIyc0oyWkVaSFpBdFN2U1RidVJOQ0RCUkVrSFBUOGhtZE1xRzdaemh1R1MKcnE3N0R0QVN5eWhFNlVrUytZVzQvRS95OExRMkdjRW9STHluOE1SM1FRRThXOXREZnoxMkhCVEV6VjkySC96aApKUkxRK3p3eGZ6T0hnc3BrWFJIcjlFZjlGZDNSYWNabnU2Ry81cU04ZVVMSlhVb2JXOHVUTjFocTFIUmU4VmtiCkp0aTJ6SWJQZ3hHaEtBPT0KLS0tLS1FTkQgUEtDUzctLS0tLQo=']
        };
        kmClient.verify(requestObject, function(error, res) {
            assert(error, 'Expecting Error');
            assert(!res, 'Response not expected');
            assert(error.errno === 'ETIMEDOUT', 'Expected code is ETIMEDOUT');
            var expectedErrorMsg = 'SLA Exceeded: Entire response not received from KeyMakerAgent within SLA';
            assert(contains(JSON.stringify(error), expectedErrorMsg), 'Expected Error Message Not Found');
            console.timeEnd('pkcs7-verify-timeBudgetExceeded');
            next();
        });
    });

    after('keymaker shutdown', function(next) {
        KeyMakerClient.shutdown();
        next();
    });
});
