/* WARNING : DO NOT USE THIS MODULE. IT'S FOR INTERNAL INFRA USE ONLY.
 * InfraCryptoAPIProvider -- To address the use-case of LEGACY infra middlewares.
 * Purpose of this module -- STRICTLY For Node Infra middlewares ONLY
 * Who should use this ? -- To be used only by Infra team to address the legacy use-cases.
 * Who should NOT use this? -- Clients/Customers across PayPal. Infra with new FR should not use this as well.
 * Limitations of this module -- This module addresses specific scenarios ONLY where fallback on agent will not be provided.
 * As keymaker customer, I decided to use this module and my flow breaks -- No Support will be provided from Security Infra. You Are On Your OWN!
 * You have Questions? -- Reach out to DL-PP-KeyMaker-Team
*/

var base64 = require('base64-paypal'),
    debug = require('debuglog')('kmsclientdebug'),
    localCrypto = require('./localCryptoApi'),
    utils = require('./utils');

var InfraCryptoAPIProvider = function () {
    debug('Constructing InfraCryptoAPIProvider');
};
InfraCryptoAPIProvider.prototype.encrypt = function(params) {
    var res;
    var validationError = utils.validateInput(params);
    if (validationError) throw validationError;
    res = localCrypto.encrypt(params.keyId, params.data);
    utils.checkEmptyResponse(res);
    return res;
};
InfraCryptoAPIProvider.prototype.decrypt = function(params) {
    var res;
    var validationError = utils.validateInput(params);
    if (validationError) throw validationError;
    if (typeof params.data !== 'string') {
        throw new Error('Input Invalid - request object param \'data\' should be string');
    }
    res = localCrypto.decrypt(params.keyId, base64.decode(params.data));
    utils.checkEmptyResponse(res);
    return res;
};
InfraCryptoAPIProvider.prototype.hmac = function(params) {
    var res;
    var validationError = utils.validateInput(params);
    if (validationError) throw validationError;
    res = localCrypto.hmac(params.keyId, params.data);
    utils.checkEmptyResponse(res);
    return res;
};
InfraCryptoAPIProvider.prototype.seal = function(params) {
    var res;
    var validationError = utils.validateInput(params);
    if (validationError) throw validationError;
    res = localCrypto.seal(params.cryptKeyId, params.macKeyId, params.data);
    utils.checkEmptyResponse(res);
    return res;
};
InfraCryptoAPIProvider.prototype.unseal = function(params) {
    var res;
    var validationError = utils.validateInput(params);
    if (validationError) throw validationError;
    if (typeof params.data !== 'string') {
        throw new Error('Input Invalid - request object param \'data\' should be string');
    }
    res = localCrypto.unseal(params.cryptKeyId, params.macKeyId, params.data);
    utils.checkEmptyResponse(res);
    return res;
};
InfraCryptoAPIProvider.prototype.getSecret = function(params) {
    var res;
    var validationError = utils.validateInput(params, 'secretprovider');
    if (validationError) throw validationError;
    res = localCrypto.getSecret(params.keyId);
    utils.checkEmptyResponse(res);
    return res;
};

module.exports = {
	cryptoProvider : InfraCryptoAPIProvider
};
