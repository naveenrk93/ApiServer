'use strict';
var poolModule = require('generic-pool'),
    deployEnv = require('environment-paypal'),
    connectionUtils = require('./connectionUtils'),
    pool;

/** 
 * Create an object of generic-pool for connection pooling
 */
function ConnectionPool(options) {
    if (deployEnv.isNotDev()) console.log('KeyMaker Connection Pool Init');
    options = options || {};
    //Sets config with client supplied values or sets it default values
    var config;
    if(options.isCryptoservPool)
        config = connectionUtils.constructCryptoservConfig(options);
    else
        config = connectionUtils.constructAgentConfig(options);

    pool = poolModule.Pool({
        name: config.poolName,
        create: connectionUtils.createSocket.bind(null, config),
        destroy: connectionUtils.destroySocket,
        min: config.min,
        max: config.max,
        reapIntervalMillis: config.reapIntervalMillis,
        idleTimeoutMillis: config.idleTimeoutMillis,
        returnToHead: false,
        log: config.isPoolLogEnabled
    });
    process.on('exit', function() {
        pool.drain(function() {
            pool.destroyAllNow();
        });
    });
    if (deployEnv.isNotDev()) console.log('KeyMaker Connection Pool returning');
    return pool;
}

module.exports = ConnectionPool;